<?php
/**
 * @file
 * Allow administrator to manage automatic reflations.
 */

define('UC_REFLATE_MAIL_VAR', 'uc_reflate_email');
define('UC_REFLATE_INTERVAL_VAR', 'uc_reflate_interval');
define('UC_REFLATE_LAST_RUN_VAR', 'uc_reflate_last_run');
define('UC_REFLATE_REFLATED_VAR', 'uc_reflate_reflated');

define('UC_REFLATE_PERMISSION', 'administer store reflations');

/**
 * Implements hook_permission().
 */
function uc_reflate_permission() {
  $perm = array();
  
  $perm[UC_REFLATE_PERMISSION] = array(
    'title' => 'Administer store reflations',
    'description' => '',
  );
  
  return $perm;
}

/**
 * Implements hook_menu().
 */
function uc_reflate_menu() {
  $menu = array();
  
  $menu['admin/store/reflate'] = array(
    'title' => 'Relances',
    'description' => '',
    'access arguments' => array(UC_REFLATE_PERMISSION),
    'page callback' => '_uc_reflate_home',
  );
  $menu['admin/store/reflate/settings'] = array(
    'title' => 'Settings',
    'description' => 'Paramètres du module',
    'access arguments' => array(UC_REFLATE_PERMISSION),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_reflate_settings_form'),
  );
  $menu['admin/store/reflate/force'] = array(
    'title' => 'Forcer une relance',
    'description' => '',
    'access arguments' => array(UC_REFLATE_PERMISSION),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_reflate_force_confirm_form'),
  );
  
  return $menu;
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function uc_reflate_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (preg_match('#^admin/store/reflate#', $root_path)) {
    $menu = menu_get_item('admin/store/reflate');
    $content = system_admin_menu_block($menu);
    if (empty($data['tabs'])) { $data['tabs'] = array(); }
    if (empty($data['tabs'][0])) { $data['tabs'][0] = array('count' => 0, 'output' => array()); }
    foreach ($content as $item) {
      $data['tabs'][0]['count']++;
      $data['tabs'][0]['output'][] = array(
        '#theme' => 'menu_local_task',
        '#link' => $item,
        '#active' => $item['router_path'] == $root_path,
      );
    }
  }
}

/**
 * Implements hook_mail().
 */
function uc_reflate_mail($key, &$message, $params) {
  $site_name = uc_reflate_get_source();
  if ($key == 'report') {
    $date = $params['date'];
    $count = $params['count'];
    
    $message['subject'] = '[' . $site_name . '] Relance terminée';
    $message['body'] = array();
    $message['body'][] = 'Une nouvelle relance ' 
            . ' s\'est terminée sur le site ' . $site_name 
            . ' le ' . date('d/m/Y', $date) . ' à ' . date('H:i', $date);
    $message['body'][] = '';
    $message['body'][] = 'Cette dernière concernait ' . format_plural($count, '@count commande', '@count commandes');
  }
  elseif ($key == 'reflate') {
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
    $message['subject'] = '[' . $site_name . '] Relance de commande';
    $message['from'] = uc_store_email_from();
    $message['body'][] = theme('uc_order', array('order' => $params['order'], 'op' => 'admin-mail', 'template' => variable_get('uc_cust_order_invoice_template', 'customer')));
  }
}

/**
 * Implements hook_cron().
 */
function uc_reflate_cron() {
  if (date(H) > 1 && date(H) < 4) {
    uc_reflate_execute();
  }
}


// -----------------------------------------------------------------------------
// TOOLS

/**
 * Get uc_export source site. 
 */
function uc_reflate_get_source() {
  return strpos($GLOBALS['base_url'], 'legiest') !== FALSE ?
         'Legiest' : 'AffichageCodeDuTravail';  
}

/**
 * Implements hook_uc_order().
 */
function uc_reflate_uc_order($op, $order, $arg2) {
  if ($op == 'update') {
    if (!in_array($arg2->order_status, array('pending', 'special_pending'))) {
      $reflated = variable_get(UC_REFLATE_REFLATED_VAR, array());
      unset($reflated[$arg2->order_id]);
      variable_set(UC_REFLATE_REFLATED_VAR, $reflated);
    }
  }
}

/**
 * Manage multidate reflates.
 */
function uc_reflate_filter($orders) {
  $intervals = explode(',', variable_get(UC_REFLATE_INTERVAL_VAR, '30,15,15'));
  $reflated = variable_get(UC_REFLATE_REFLATED_VAR, array());

  $to_reflate = array();
  foreach ($orders as $i => $order) {
    // Never reflated
    if (!array_key_exists($order->order_id, $reflated)) {
      // Last modification time is older than the first reflate
      if ($order->modified < REQUEST_TIME - ($intervals[0] * 24 * 60 * 60)) {
        $reflated[$order->order_id] = 1;
        $to_reflate[] = $order->order_id;
      }
    }
    // Already reflated and new reflate interval exists
    elseif (!empty($intervals[$reflated[$order->order_id]])) {
      // Last modification time is older than the new reflate
      if ($order->modified < REQUEST_TIME - ($intervals[$reflated[$order->order_id]] * 24 * 60 * 60)) {
        $reflated[$order->order_id]++;
        $to_reflate[] = $order->order_id;
      }      
    }
  }

  variable_set(UC_REFLATE_REFLATED_VAR, $reflated);
  return $to_reflate;
}

/**
 * Process a reflation.
 */
function uc_reflate_execute($force = FALSE) {
  $start = microtime(TRUE);

  // Check if a new reflation is needed or forced
  $last = variable_get(UC_REFLATE_LAST_RUN_VAR, 0);
  $interval = 24 * 60 * 60; // 1 day
  // If not forced
  if (!$force) {
    // The interval is not over
    // We remove 10 minute in the test to allow small variations
    if (time() < $last + $interval - 600) {
      return;
    }
  }
  // Used to avoid multiple reflations at the same time
  if (time() < $last) {
    return;
  }
  
  // Set the last reflation time in the future to avoid multiple reflations at the same time
  variable_set(UC_REFLATE_LAST_RUN_VAR, mktime(0, 0, 0, 1, 1, date('Y')+1));

  // Keep the current time
  $now = REQUEST_TIME;

  // Get reflatable orders
  $to_reflate = db_select('uc_orders', 'o')
    ->fields('o', array('order_id', 'modified'))
    ->condition('order_status', array('pending', 'special_pending'), 'IN')
    ->execute()
    ->fetchAll();
  // Filter orders
  $to_reflate = uc_reflate_filter($to_reflate);
  $orders = uc_order_load_multiple($to_reflate);
  
  // Send reflation mails
  foreach ($orders as $order) {
    drupal_mail('uc_reflate', 'reflate', $order->primary_email, language_default(), array('order' => $order));
    db_update('uc_orders')
      ->fields(array(
        'modified' => $now,
      ))
      ->condition('order_id', $order->order_id)
      ->execute();
    uc_order_log_changes($order->order_id, array('Relance par email.'));
  }
  
  // Save the current time as the last reflate
  variable_set(UC_REFLATE_LAST_RUN_VAR, $now);

  // Send the report by email
  $mail = variable_get(UC_REFLATE_MAIL_VAR);
  if (!empty($mail)) {
    $params = array(
      'date'  => $now,
      'count' => count($orders),
    );
    drupal_mail('uc_reflate', 'report', $mail, language_default(), $params);
  }

  // Report succes in watchdog
  $end = microtime(TRUE);
  drupal_set_message('La relance s\'est déroulée avec succès.', 'status');
  watchdog('uc_reflate', 
         'Reflation is over.<br />- @total_time seconds<br />- @count mails', 
           array(
             '@total_time' => round($end - $start, 2),
             '@count' => count($orders),
           ), 
           WATCHDOG_INFO);
}

// -----------------------------------------------------------------------------
// FORMS

/**
 * Confirmation form to force a reflation.
 *
 * @see uc_reflate_force_confirm_form_submit()
 * @ingroup forms
 */
function uc_reflate_force_confirm_form($form, &$form_state) {
  return confirm_form($form, t('Êtes vous certain de vouloir forcer la relance ?', array()), 'admin/store/reflate', 'Attention, cela peut ralentir fortement votre site durant plusieurs minutes.', t('Forcer'));
}

/**
 * Form submission handler for uc_reflate_force_confirm_form().
 *
 * @see uc_reflate_force_confirm_form()
 */
function uc_reflate_force_confirm_form_submit($form, &$form_state) {
  uc_reflate_execute(TRUE);

  $form_state['redirect'] = 'admin/store/reflate';
}

/**
 * Implements hook_form().
 */
function uc_reflate_settings_form() {
  $form = array();
  
  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => 'E-Mail',
    '#description' => 'Adresse à laquelle sont envoyés les rapports.',
    '#default_value' => variable_get(UC_REFLATE_MAIL_VAR, ''),
    '#required' => TRUE,
  );
  $form['interval'] = array(
    '#type' => 'textfield',
    '#title' => 'Intervales',
    '#description' => 'Nombre de jours entre chaque relance. Vous pouvez entrer plusieurs valeurs séparées par une virgule.<br/>Si le nombre d\'intervales n\'est pas suffisant pour une commande, ses relances seront interrompues.',
    '#default_value' => variable_get(UC_REFLATE_INTERVAL_VAR, '30,15,15'),
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Implements hook_form_validate().
 */
function uc_reflate_settings_form_validate($form, &$form_state) {
  if (!empty($form_state['values']['interval'])) {
    $form_state['values']['interval'] = str_replace(' ', '', $form_state['values']['interval']);
    $form_state['values']['interval'] = explode(',', $form_state['values']['interval']);
    $form_state['values']['interval'] = array_map('floatval', $form_state['values']['interval']);
    $form_state['values']['interval'] = array_map('round', $form_state['values']['interval']);
    $form_state['values']['interval'] = array_map('abs', $form_state['values']['interval']);
    $form_state['values']['interval'] = array_filter($form_state['values']['interval']);
    $form_state['values']['interval'] = implode(',', $form_state['values']['interval']);
  }
  if (!empty($form_state['values']['mail']) && !valid_email_address($form_state['values']['mail'])) {
    form_set_error('mail', t('The e-mail address you specified is not valid.'));
  }
}

/**
 * Implements hook_form_submit().
 */
function uc_reflate_settings_form_submit($form, &$form_state) {
  variable_set(UC_REFLATE_MAIL_VAR, $form_state['values']['mail']);
  variable_set(UC_REFLATE_INTERVAL_VAR, $form_state['values']['interval']);
  drupal_set_message('Les nouveaux paramètres ont été enregistrés.', 'status');
}


// -----------------------------------------------------------------------------
// MENU CALLBACKS

/**
 * Menu admin/store/reflate page callback.
 */
function _uc_reflate_home() {
  $menu = menu_get_item('admin/store/reflate');
  $content = system_admin_menu_block($menu);

  $build['menu'] = array(
    '#theme' => 'admin_block_content',
    '#content' => $content,
    '#weight' => 5,
  );

  return $build;
}
