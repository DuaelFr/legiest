<?php

/**
 * Implements hook_permission().
 */
function uc_legiest_permission() {
  return array(
    'use special order states' => array(
      'title' => t('Use special order states'),
      'description' => t('Allow the user to be delivered before paying (for administrations)'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function uc_legiest_menu() {
  $items['admin/store/orders/%uc_order/receive_virt_admin'] = array(
    'title' => 'Recevoir un virement administratif',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_legiest_receive_virt_admin_form', 3),
    'access arguments' => array('view all orders'),
    'type' => MENU_CALLBACK,
    'file' => 'uc_legiest.admin.inc',
  );
  $items['admin/legiest/bulk/invoice/print'] = array(
    'title' => '',
    'page callback' => '_uc_legiest_bulk_invoice_print',
    'access arguments' => array('view all orders'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function uc_legiest_admin_paths() {
  return array(
    'admin/legiest/bulk/invoice/print' => FALSE,
  );
}

/**
 * Implements hook_theme().
 */
function uc_legiest_theme() {
  return array(
    // Virement administratif
    'uc_legiest_receive_virt_admin_form' => array(
      'render element' => 'form',
      'file' => 'uc_legiest.admin.inc',
    ),
    'uc_legiest_bank_details' => array(
      'variables' => array('oid' => NULL),
    ),
    // Modif affichage sous total panier
    'uc_legiest_cart_review_table' => array(
      'variables' => array('items' => array(), 'show_subtotal' => TRUE),
    ),
  );
}

/**
 * Implements hook_commerce_order_status_info().
 */
function uc_legiest_commerce_order_status_info() {
  $order_statuses = array();
  
  $order_statuses['processing_special'] = array(
    'name' => 'processing_special',
    'title' => t('Processing : Administration'),
    'state' => 'pending',
    'cart' => FALSE,
  );
  $order_statuses['pending_special'] = array(
    'name' => 'pending_special',
    'title' => t('Pending : Administration'),
    'state' => 'pending',
    'cart' => FALSE,
  );
  
  return $order_statuses;
}

/**
 * Implements hook_uc_order_state().
 */
function uc_legiest_uc_order_state() {
  // Add a new special state
  $states['special'] = array(
    'title' => t('Special'),
    'weight' => 10,
    'scope' => 'general',
  );
  // Override default completed state to change its scope
  $states['completed'] = array(
    'title' => t('Completed'),
    'weight' => 20,
    'scope' => 'specific',
  );

  return $states;
}

/**
 * Implements hook_views_pre_view().
 */
function uc_legiest_views_pre_build(&$view) {
  if ($view->name == 'uc_customers') {
    $display = $view->display[$view->current_display];
    $filter = $display->handler->handlers['filter']['order_status'];
    $filter->value['completed'] = 'completed';
  }
}

/**
 * Implements hook_tapir_table_alter().
 */
function uc_legiest_tapir_table_alter(&$table, $table_id) {
  if ($table_id == 'uc_cart_view_table') {
    $table['#columns']['remove']['weight'] = 5;
    foreach (element_children($table) as $key) {
      if (!empty($table[$key]['remove'])) {
        $table[$key]['remove']['#type'] = 'image_button';
        $table[$key]['remove']['#value'] = '';
        $table[$key]['remove']['#button_type'] = 'image';
        $table[$key]['remove']['#src'] = drupal_get_path('theme', variable_get('theme_default', 'bartik')) . '/images/cart-remove.png';
      }
      if (!empty($table[$key]['total']) && count($table[$key]) == 1) {
        $table[$key]['total']['#prefix'] = str_replace('Sous-total', 'Sous-total HT', $table[$key]['total']['#prefix']);
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 * 
 * Remove "Back" button from cart review.
 */
function uc_legiest_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'uc_cart_checkout_review_form') {
    unset($form['actions']['back']);
  }
}

/**
 * Implements hook_element_info_alter().
 * 
 * Allow to set default country as France.
 */
function uc_legiest_element_info_alter(&$type) {
  $type['uc_address']['#process'][] = 'uc_legiest_process_address_field';
}

/**
 * Implements hook_uc_checkout_pane_alter().
 * 
 * Allow to add an "HT" mention into the cart review pane.
 */
function uc_legiest_uc_checkout_pane_alter(&$panes) {
  $panes['cart']['callback'] = 'uc_legiest_pane_cart';
}

/**
 * Implements hook_commerce_tax_rate_info().
 */
function uc_legiest_commerce_tax_rate_info() {
  $tax_rates = array();

  $tax_rates['tva_standard'] = array(
    'title' => t('TVA standard'),
    'rate' => .196,
    'type' => 'vat',
    'default_rules_component' => FALSE,
    'admin_list' => TRUE,
  );

  return $tax_rates;
}

/**
 * Implements hook_uc_payment_method().
 */
function uc_legiest_uc_payment_method() {
  $methods[] = array(
    'id' => 'virt_admin',
    'name' => t('Virement administratif'),
    'title' => variable_get('uc_legiest_method_title', 'Virement administratif'),
    'desc' => t('Régler par virement administratif. Réservé aux Organismes Publics français.'),
    'callback' => 'uc_payment_method_virt_admin',
    'weight' => 1,
    'checkout' => TRUE,
    'no_gateway' => TRUE,
  );
  return $methods;
}

/**
 * Implements hook_views_default_views_alter().
 * 
 * Add company field to admin views.
 */
function uc_legiest_views_default_views_alter(&$views) {
  if (array_key_exists('uc_orders', $views)) {
    $handler = &$views['uc_orders']->display['default']->handler;
    
    /* Champ: Opérations en masse : Ordre */
    $new_field = array(
      'id' => 'views_bulk_operations',
      'table' => 'uc_orders',
      'field' => 'views_bulk_operations',
      'vbo' => array(
        'entity_load_capacity' => '10',
        'operations' => array(
          'action::uc_legiest_action_print' => array(
            'selected' => 1,
            'skip_confirmation' => 0,
            'override_label' => 0,
            'label' => '',
          ),
        ),
        'enable_select_all_pages' => 1,
        'display_type' => '0',
        'display_result' => 1,
        'merge_single_action' => 0,
        'force_single' => 0,
      ),
    );
    drupal_array_insert($handler->display->display_options['fields'], 'actions', array('views_bulk_operations' => $new_field), TRUE);

    /* Field: Order: Billing address: Company */
    $new_field = array(
      'id' => 'billing_company',
      'table' => 'uc_orders',
      'field' => 'billing_company',
      'alter' => array(
        'alter_text' => 0,
        'make_link' => 0,
        'absolute' => 0,
        'external' => 0,
        'replace_spaces' => 0,
        'trim_whitespace' => 0,
        'nl2br' => 0,
        'word_boundary' => 1,
        'ellipsis' => 1,
        'more_link' => 0,
        'strip_tags' => 0,
        'trim' => 0,
        'html' => 0,
      ),
      'element_label_colon' => 1,
      'element_default_classes' => 1,
      'hide_empty' => 0,
      'empty_zero' => 0,
      'hide_alter_empty' => 1,
    );
    drupal_array_insert($handler->display->display_options['fields'], 'uid', array('billing_company' => $new_field));
  }
  if (array_key_exists('uc_customers', $views)) {
    $handler = &$views['uc_customers']->display['default']->handler;
    
    /* Display formatter option */
    $new_opt = array(
      'sortable' => 1,
      'default_sort_order' => 'asc',
      'align' => '',
      'separator' => '',
      'empty_column' => 0,
    );
    drupal_array_insert($handler->display->display_options['style_options']['info'], 'name', array('billing_company' => $new_opt));

    /* Field: Order: Billing address: Company */
    $new_field = array(
      'id' => 'billing_company',
      'table' => 'uc_orders',
      'field' => 'billing_company',
      'alter' => array(
        'alter_text' => 0,
        'make_link' => 0,
        'absolute' => 0,
        'external' => 0,
        'replace_spaces' => 0,
        'trim_whitespace' => 0,
        'nl2br' => 0,
        'word_boundary' => 1,
        'ellipsis' => 1,
        'more_link' => 0,
        'strip_tags' => 0,
        'trim' => 0,
        'html' => 0,
      ),
      'element_label_colon' => 1,
      'element_default_classes' => 1,
      'hide_empty' => 0,
      'empty_zero' => 0,
      'hide_alter_empty' => 1,
    );
    drupal_array_insert($handler->display->display_options['fields'], 'name', array('billing_company' => $new_field));
    
    /* Filter criterion: Order: Billing address: Company */
    $new_filter = array(
      'id' => 'billing_company',
      'table' => 'uc_orders',
      'field' => 'billing_company',
      'relationship' => 'uc_orders',
      'operator' => 'contains',
      'group' => 0,
      'exposed' => TRUE,
      'expose' => array(
        'operator_id' => 'billing_company_op',
        'label' => 'Société',
        'operator' => 'billing_company_op',
        'identifier' => 'billing_company',
        'required' => 0,
        'multiple' => FALSE,
      ),
    );
    drupal_array_insert($handler->display->display_options['filters'], 'order_status', array('billing_company' => $new_filter));
  }
}

/**
 * Implements hook_uc_order_actions_alter().
 */
function uc_legiest_uc_order_actions_alter(&$actions) {
  foreach ($actions as &$action) {
    if ($action['name'] == t('Print')) {
      $action['attributes']['target'] = '_blank';
    }
  }
}

/**
 * Implements hook_action_info().
 */
function uc_legiest_action_info() {
  return array(
    'uc_legiest_action_print' => array(
      'label' => t('Imprimer les factures'),
      'type' => 'uc_order',
      'aggregate' => TRUE,
      'configurable' => FALSE,
    ),
  );
}


// -----------------------------------------------------------------------------
// CALLBACKS

/**
 * Handle the Virement administratif payment method.
 */
function uc_payment_method_virt_admin($op, &$order) {
  switch ($op) {
    case 'cart-details':
      $build['instructions'] = array(
        '#markup' => t('Envoyer le règlement à') . ':<br />' . theme('uc_legiest_bank_details', array('oid' => $order->order_id)),
      );
      return $build;

    case 'cart-review':
      $review[] = array(
        'title' => t('To'),
        'data' => theme('uc_legiest_bank_details', array('oid' => $order->order_id)),
      );
      return $review;

    case 'order-view':
      if (!variable_get('uc_payment_tracking', TRUE)) {
        return '';
      }
      $result = db_query("SELECT clear_date FROM {uc_payment_virt_admin} WHERE order_id = :id ", array(':id' => $order->order_id));
      if ($clear_date = $result->fetchField()) {
        $output = t('Date d\'encaissement :') . ' ' . format_date($clear_date, 'custom', variable_get('uc_date_format_default', 'd/m/Y'));
      }
      else {
        $output = l(t('Enregistrer un Virement Administratif'), 'admin/store/orders/' . $order->order_id . '/receive_virt_admin');
      }
      $output .= '<br />';
      return array('#markup' => $output);

    case 'customer-view':
      if (!variable_get('uc_payment_tracking', TRUE)) {
        return '';
      }
      $result = db_query("SELECT clear_date FROM {uc_payment_virt_admin} WHERE order_id = :id ", array(':id' => $order->order_id));
      $output = t('Status: pending');
      if ($clear_date = $result->fetchField()) {
        $output = t('Virement Administratif reçu') . '<br />'
                . t('Date d\'encaissement estimée :') . '<br />' . format_date($clear_date, 'custom', variable_get('uc_date_format_default', 'd/m/Y'));
      }
      return array('#markup' => $output);

    case 'settings':
      // help text
      $form['uc_legiest_help_text'] = array(
        '#markup' => '<div class="help">' . t('<h4><strong>Installation instructions</strong></h4><p>For better customer experience please use the token [order-payment-bank-details] to display the bank details on the invoice. You can find an example invoice template doing this in the uc_bank_transfer module folder.</p>') . '</div>',
      );
      // settings
      $form['uc_legiest_method_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Payment method title'),
        '#description' => t('Provide specific description for the payment method on the order checkout page.'),
        '#default_value' => variable_get('uc_legiest_method_title', 'Virement Administratif'),
      );

      $form['uc_dd_bank'] = array(
        '#type' => 'fieldset',
        '#title' => t('Bank details'),
        '#description' => t('Enter the bank account details to display to customers who choose this payment method during checkout.
          Details left empty will not be shown. You can also choose to leave all bank details empty and create your own output using the payment instructions.
          '),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      );
      $form['uc_dd_bank']['uc_legiest_account_owner'] = uc_textfield(t('Account owner'), variable_get('uc_legiest_account_owner', ''), FALSE, t('Name associated with bank account.'), 128);
      $form['uc_dd_bank']['uc_legiest_account_number'] = uc_textfield(t('Account number'), variable_get('uc_legiest_account_number', ''), FALSE, NULL, 128);
      $form['uc_dd_bank']['uc_legiest_account_iban'] = uc_textfield(t('IBAN'), variable_get('uc_legiest_account_iban', ''), FALSE, t('International Bank Account Number'), 128);
      $form['uc_dd_bank']['uc_legiest_bank_code_appellation'] = uc_textfield(t('Bank code appellation'), variable_get('uc_legiest_bank_code_appellation', 'Bank code'), FALSE, t('Appellation of bank code - depending on where your bank is located you should set this to: "BSB" (AU), "Sort code" (UK), "Bank code" (DE), "Clearing number" (CH), "Routing transit number" (US) or "Bank transit number" (CA)'), 128);
      $form['uc_dd_bank']['uc_legiest_bank_code'] = uc_textfield(t('Bank code'), variable_get('uc_legiest_bank_code', ''), FALSE, t('Actual bank code, will be shown with appellation set above'), 128);
      $form['uc_dd_bank']['uc_legiest_account_swift'] = uc_textfield(t('SWIFT'), variable_get('uc_legiest_account_swift', ''), FALSE, t('SWIFT-Code (aka BIC = Bank Identifier Code)'), 128);
      $form['uc_dd_bank']['uc_legiest_account_bank'] = uc_textfield(t('Banking institution'), variable_get('uc_legiest_account_bank', ''), FALSE);
      $form['uc_dd_bank']['uc_legiest_account_branch'] = uc_textfield(t('Branch office'), variable_get('uc_legiest_account_branch', ''), FALSE);

      $form['uc_legiest_subject_oid'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display "Reason for payment: order number <i>[order ID]</i>"'),
        '#default_value' => variable_get('uc_legiest_subject_oid', FALSE),
      );
      $form['uc_legiest_policy'] = array(
        '#type' => 'textarea',
        '#title' => t('Payment instructions'),
        '#description' => t('Instructions for customers on the checkout page. Use &lt;br /&gt; for line break.'),
        '#default_value' => variable_get('uc_legiest_policy', ''),
        '#rows' => 3,
      );
      return $form;
  }
}

/**
 * uc_address form type callback.
 * 
 * Set default country as France.
 */
function uc_legiest_process_address_field($element, $form_state) {
  $prefix = $element['#key_prefix'] ? ($element['#key_prefix'] . '_') : '';

  if (isset($form_state['uc_address'])) {
    // Use submitted Ajax values.
    $value = $form_state['uc_address'];
  }
  elseif (is_array($element['#value']) || is_object($element['#value'])) {
    // Use provided default value.
    $value = (array) $element['#value'];
  }
  else {
    $value = array();
  }
  
  $countries = $element[$prefix . 'country']['#options'];
  // Force the selected country to a valid one, so the zone dropdown matches.
  if (empty($value[$prefix . 'country']) || !isset($countries[$value[$prefix . 'country']])) {
    $element[$prefix . 'country']['#default_value'] = array_search('France', $countries);
  }

  return $element;
}

/**
 * Override cart review display function.
 * 
 * Allow to add an "HT" mention into the cart review pane.
 */
function uc_legiest_pane_cart($op, $order, $form = NULL, &$form_state = NULL) {
  $result = uc_checkout_pane_cart($op, $order, $form, $form_state);
  $result['contents']['cart_review_table']['#theme'] = 'uc_legiest_cart_review_table';
  return $result;
}

/**
 * uc_legiest_action_print action callback.
 */
function uc_legiest_action_print($orders, $context = array()) {
  $output = '';

  foreach ($orders as $order) {
    $output .= '<div style="page-break-after: always;">';
    $output .= theme('uc_order', array(
      'order' => $order,
      'op' => 'print',
      'template' => variable_get('uc_cust_order_invoice_template', 'customer'),
    ));
    $output .= '</div>';
  }

  $_SESSION['uc_legiest_bulk_invoice_print'] = $output;
  drupal_goto('admin/legiest/bulk/invoice/print');
}

/**
 * Invoice bulk print callback.
 */
function _uc_legiest_bulk_invoice_print() {
  $output = $_SESSION['uc_legiest_bulk_invoice_print'];
  
  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  print theme('uc_order_invoice_page', array('content' => $output));
  exit();  
}


// -----------------------------------------------------------------------------
// THEMES

/**
 * Override cart review display format.
 * 
 * Add an "HT" mention into the cart review pane.
 */
function theme_uc_legiest_cart_review_table($variables) {
  $result = theme_uc_cart_review_table($variables);
  $result = str_replace('Sous-total', 'Sous-total HT', $result);
  return $result;
}

/**
 * Theme output displayed in checkout review, etc.
 */
function theme_uc_legiest_bank_details($variables) {
  $oid = $variables['oid'];
  $output = uc_legiest_bank_details_bank_details($oid);
  return $output;
}

/**
 * Implementation of uc_legiest_bank_details($oid).
 *
 * $oid = order ID
 */
function uc_legiest_bank_details_bank_details($oid) {
  if (variable_get('uc_legiest_account_owner', '') <> '') {
    $bank_info[] = t('Propriétaire du compte') . ': ' . variable_get('uc_legiest_account_owner', '');
  }
  if (variable_get('uc_legiest_account_number', '') <> '') {
    $bank_info[] = t('Numéro de compte') . ': ' . variable_get('uc_legiest_account_number', '');
  }
  if (variable_get('uc_legiest_account_iban', '') <> '') {
    $bank_info[] = t('IBAN') . ': ' . variable_get('uc_legiest_account_iban', '');
  }
  if (variable_get('uc_legiest_bank_code', '') <> '') {
    $bank_info[] = variable_get('uc_legiest_bank_code_appellation', 'Code banque') . ': ' . variable_get('uc_legiest_bank_code', '');
  }
  if (variable_get('uc_legiest_account_swift', '') <> '') {
    $bank_info[] = t('SWIFT') . ': ' . variable_get('uc_legiest_account_swift', '');
  }
  if (variable_get('uc_legiest_account_bank', '') <> '') {
    $bank_info[] = t('Nom de la banque') . ': ' . variable_get('uc_legiest_account_bank', '');
  }
  if (variable_get('uc_legiest_account_branch', '') <> '') {
    $bank_info[] = t('Nom de l\'agence') . ': ' . variable_get('uc_legiest_account_branch', '');
  }
  if (variable_get('uc_legiest_subject_oid', FALSE)) {
    isset($bank_info) ? ($bank_info[] = '<br />' . t('Libellé du paiement') . ': ' . t('numéro de commande') . ' ' . $oid) : ($bank_info[] = t('Libellé du paiement') . ': ' . t('numéro de commande') . ' ' . $oid);
  }
  if (variable_get('uc_legiest_policy', '') <> '') {
    isset($bank_info) ? ($bank_info[] = '<br />' . variable_get('uc_legiest_policy', '')) : ($bank_info[] = variable_get('uc_legiest_policy', ''));
  }

  isset($bank_info) ? ($bank_details = implode('<br />', $bank_info)) : ($bank_details = '');

  return $bank_details;
}
