<?php
/**
 * @file
 * Subscriptions management
 */

// -----------------------------------------------------------------------
// Constants

define('LEGIEST_SUBSCRIPTION__DIR__', dirname(__FILE__));

// entities
define('LEGIEST_SUBSCRIPTION_ENTITY_NAME', 'legiest_subscription');


// ------------------------------------------------------------------------
// HOOKS

/**
 * Implements hook_entity_info().
 */
function legiest_subscription_entity_info() {
  $return = array(
    LEGIEST_SUBSCRIPTION_ENTITY_NAME => array(
      'label' => t('Subscription'),
      'plural label' => t('Subscriptions'),
      'description' => t('Subscription from legiest store.'),
      'entity class' => 'LegiestSubscriptionEntity',
      'controller class' => 'LegiestSubscriptionEntityController',
      'base table' => 'legiest_subscription',
      'fieldable' => FALSE,
      'exportable' => FALSE,
      'entity keys' => array(
        'id' => 'subscription_id',
      ),
      // Make use the class' label() and uri() implementation by default.
      'access callback' => '_legiest_subscription_access',
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'legiest_subscription',
    ),
  );

  // Support entity cache module.
//  if (module_exists('entitycache')) {
//    $return[LEGIEST_SUBSCRIPTION_ENTITY_NAME]['field cache'] = FALSE;
//    $return[LEGIEST_SUBSCRIPTION_ENTITY_NAME]['entity cache'] = TRUE;
//  }

  return $return;
}


/**
 * Implemens hook_permission().
 */
function legiest_subscription_permission() {
  $perm = array();
  
  $perm['access own subscriptions'] = array(
    'title' => t('Access own subscriptions'),
  );
  $perm['access all subscriptions'] = array(
    'title' => t('Access all subscriptions'),
    'restrict access' => TRUE,
  );
  $perm['revoke own subscriptions'] = array(
    'title' => t('Revoke own subscriptions'),
  );
  $perm['revoke all subscriptions'] = array(
    'title' => t('Revoke all subscriptions'),
    'restrict access' => TRUE,
  );

  return $perm;
}

/**
 * Implemens hook_menu().
 */
function legiest_subscription_menu() {
  $menu = array();
  
  $menu['user/%user/subscriptions'] = array(
    'title' => t('Subscriptions'),
    'page callback' => 'views_embed_view',
  	'page arguments' => array('subscriptions', 'page'),
  	'access callback' => '_legiest_subscription_access',
  	'access arguments' => array('list', 1),
  	'type' => MENU_LOCAL_TASK,
  );
  
  $menu['user/%user/subscriptions/%legiest_subscription'] = array(
    'title callback' => '_legiest_subscription_title',
  	'title arguments' => array(3),
    'page callback' => '_legiest_subscription_view_subscription',
  	'page arguments' => array(1, 3),
  	'access callback' => '_legiest_subscription_access',
  	'access arguments' => array('view', 3),
  );
  
  $menu['user/%user/subscriptions/%legiest_subscription/view'] = array(
    'title' => t('View'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $menu['user/%user/subscriptions/%legiest_subscription/revoke'] = array(
    'title' => t('Revoke'),
    'page callback' => '_legiest_subscription_revoke',
    'page arguments' => array(3),
  	'access callback' => '_legiest_subscription_access',
  	'access arguments' => array('revoke', 3),
    'type' => MENU_LOCAL_TASK,
    'weight' => 99,
  );
  
  return $menu;
}

/**
 * Implemens hook_commerce_checkout_complete().
 */
function legiest_subscription_commerce_checkout_complete($order) {
  // Pour chacque produit de type abonnement alors créer un abonnement récurrent 
}

/**
 * Implements hook_views_api().
 */
function legiest_subscription_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'legiest_subscription') . '/views',
  );
}

//------------------------------------------------------------------------------
// FUNCTIONS

/**
 * Load a given subscription
 * 
 * @param $subscription_id int
 *   The subscription id
 * @return stdClass
 *   The subscription object
 * @todo Get from Database
 */
function legiest_subscription_load($subscription_id) {
  return entity_load_single('legiest_subscription', $subscription_id);
}

/**
 * Load a given subscription
 * 
 * @param $subscription_id int
 *   The subscription id
 * @return stdClass
 *   The subscription object
 * @todo Get from Database
 */
function legiest_subscription_load_by_user($account = NULL) {
  if (NULL === $account) {
    $account = $GLOBALS['user'];
  }
  
  return array(
    12 => legiest_subscription_load(12),
    15 => legiest_subscription_load(15),
  );
}

/**
 * 
 */
function legiest_subscription_status_options_list() {
  return array(
    'active' => t('Active'),
  	'revoked' => t('Revoked'),
  );
}

/**
 * 
 */
function legiest_subscription_status_get_title($name) {
  $status = legiest_subscription_status_options_list();
  return isset($status[$name]) ? $status[$name] : FALSE;
}

//------------------------------------------------------------------------------
// CALLBACKS

/**
 * Title callback
 */
function _legiest_subscription_title($subscription) {
  return t('Subscription @subscription_id', array('@subscription_id' => $subscription->subscription_id));
}

/**
 * Access callback
 * 
 * @params $op string	
 * 	 The current operation
 * @params $item mixed
 * 	 The current user (op = list) or the current subscription (op = view / revoke)
 */
function _legiest_subscription_access($op, $item) {
  global $user;
  $access = FALSE;
  if ($op == 'list') {
    $access = ($item->uid == $user->uid && user_access('access own subscriptions')) || user_access('access all subscriptions');
  }
  elseif( $op == 'view') {
    $access = ($item->uid == $user->uid && user_access('access own subscriptions')) || user_access('access all subscriptions');
  }
  elseif ($op == 'revoke') {
    $access = ($item->uid == $user->uid && user_access('revoke own subscriptions')) || user_access('revoke all subscriptions');
  }
  return $access;
}

/**
 * 
 */
function _legiest_subscription_view_subscriptions($account) {
  $subscriptions = legiest_subscription_load_by_user($account);
  
  $data = array(
    'header' => array(
      array('data' => t('ID'), 'field' => 'subscription_id', 'sort' => 'asc'),
      array('data' => t('User'), 'field' => 'uid', 'sort' => 'asc'),
      array('data' => t('Created'), 'field' => 'created', 'sort' => 'asc'),
      array('data' => t('Updated'), 'field' => 'changed', 'sort' => 'asc'),
    ),
  	'rows' => array(),
  	'empty' => t('No subscriptions yet.'),
  );
  foreach ($subscriptions as $subscription) {
    $data['rows'][] = array('data' => $subscription);
  }
  return theme('table', $data);
}

/**
 * 
 */
function _legiest_subscription_view_subscription($account, $subscription) {
  return 'View ' . $subscription->subscription_id;
}

/**
 * 
 */
function _legiest_subscription_revoke($subscription) {
  return 'Revoke ' . $subscription->subscription_id;
}
